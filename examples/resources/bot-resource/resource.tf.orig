provider "aws" {
  region = "us-west-2"
}

locals {

  intents = [
    {   
        id = "gas-leak"
        questions = ["I smell gas in my house. What should I do?",
                    "help my gas is leakings",
                    "emergency gas leak"]

        answer = "For Gas Emergencies or Safety Issues call Emergencies: 911 For general safety issues: 1-800-427-2200"
    },
    {
        id = "password-reset"
        questions = ["how do I reset my password?",
                    "I forgot my password",
                    "Can't remember my password",
                    "My login does not work"]

        answer = "If you forgot your My Account password, securely reset it with an authorization code that is sent to your cellphone number on your My Account profile."
    }
  ]

  slot_type_values = flatten([for s in local.intents: [for q in s.questions: {"sampleValue": {"value": q}, "synonyms": []}]])  
}

data "template_file" "slot_types" {
  template = file("${path.module}/manifest/QnABot/BotLocales/en_US/SlotTypes/QnaSlotType/SlotType.json.tmpl")
  vars = {
    slot_types = jsonencode(local.slot_type_values)
  }
}

data "archive_file" "bot" {
  type        = "zip"
  output_path = "${path.module}/archive/bot.zip"

  # for adding content that is templated
  source {
      content = data.template_file.slot_types.rendered
      filename = "QnABot_QnaBot/BotLocales/en_US/SlotTypes/QnaSlotType/SlotType.json"
  }

  # for adding content that is not templated
  source {
      # does this doesn't trigger a re-build when the file changes?
      content = file("${path.module}/manifest/QnABot/BotLocales/en_US/BotLocale.json")
      # this doesn't either :(
      # content = data.template_file.bot_local.rendered
      filename = "QnABot_QnaBot/BotLocales/BotLocale.json"
  }
}

# Upload bot manifest to s3
resource "aws_s3_bucket_object" "bot_archive" {

  depends_on = [data.archive_file.bot]

  bucket = "qnabot-assetbucket-1au43ewcieprq"

  key    = "bots/bot.zip"

  content = filebase64(data.archive_file.bot.output_path)
}

resource "local_file" "question_answer_pairs" {
    content     = jsonencode(local.intents)
    filename = "${path.module}/artifacts/pairs.json"
}

resource "awslex_bot_resource" "socal_gas_qnabot" {

  # path to the archive in s3 containing the bot manifest archive file, 
  # in import/export format
  manifest_s3_url = "s3://${resource.aws_s3_bucket_object.bot_archive.bucket}/${resource.aws_s3_bucket_object.bot_archive.key}"

  # version of the bot
  # note: version variable is set to Build.SourceBranch for feature 
  #   branch pipelines, and set to a specific release number on staging or 
  #   prod pipelines
  # note: this results in one, testable bot per feature branch
  version = var.version

  # arn of the lambda that fulfills the bot intents
  lambda_arn = resource.lambda.fulfillment_lambda.arn
}

# version of the bot
variable version {
  type = string
}

# for debugging
# output "rendered_manifest" {
#   value = data.template_file.slot_types.rendered
# }